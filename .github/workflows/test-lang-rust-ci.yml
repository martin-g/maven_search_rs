# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

name: Rust Continuous Integration
on:
  workflow_dispatch:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

permissions:
  contents: read

env:
  RUSTFLAGS: -Dwarnings

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  ci:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust:
          - 'stable'
          - 'beta'
          - 'nightly'
        target:
          - x86_64-unknown-linux-gnu

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache Cargo
        uses: actions/cache@v4
        with:
          # these represent dependencies downloaded by cargo
          # and thus do not depend on the OS, arch nor rust version.
          path: ~/.cargo
          key: cargo-cache1-
      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          # these represent compiled steps of both dependencies and avro
          # and thus are specific for a particular OS, arch and rust version.
          path: ./target
          key: ${{ runner.os }}-target-cache1-${{ matrix.rust }}-

      - name: Rust Toolchain
        uses: dtolnay/rust-toolchain@nightly
        with:
          toolchain: ${{ matrix.rust }}
          components: rustfmt
          targets: ${{ matrix.target }}

      - name: Rust Format
        run: cargo fmt --all -- --check

      - name: Rust Build
        run: cargo build --all-features --all-targets

      - name: Rust Test
        run: cargo test --all-features --target ${{ matrix.target }}

      # because of https://github.com/rust-lang/cargo/issues/6669
      - name: Rust Test docs
        run: cargo test --doc

  clippy_check:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust:
          - 'stable'
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@nightly
        with:
          toolchain: ${{ matrix.rust }}
          components: clippy
      - run: cargo clippy --all-features --all-targets -- -Dclippy::all -Dunused_imports
      